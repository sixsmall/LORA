<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\huadasx1278.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\huadasx1278.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Wed Mar 04 09:22:03 2020
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SX1278_begin &rArr; SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_SPIBurstWrite &rArr; WriteData
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[a]">IRQ004_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">IRQ004_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2c]">Bt1Int</a> from bt.o(i.Bt1Int) referenced from bt.o(i.TIME_INIT)
 <LI><a href="#[2b]">ErrIntCallback</a> from lpuart.o(i.ErrIntCallback) referenced from lpuart.o(i.LPUART_INIT)
 <LI><a href="#[2]">HardFault_Handler</a> from interrupts_hc32l110.o(i.HardFault_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[6]">IRQ000_Handler</a> from interrupts_hc32l110.o(i.IRQ000_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[7]">IRQ001_Handler</a> from interrupts_hc32l110.o(i.IRQ001_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[8]">IRQ002_Handler</a> from interrupts_hc32l110.o(i.IRQ002_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[9]">IRQ003_Handler</a> from interrupts_hc32l110.o(i.IRQ003_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[a]">IRQ004_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[b]">IRQ005_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[c]">IRQ006_Handler</a> from interrupts_hc32l110.o(i.IRQ006_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[d]">IRQ007_Handler</a> from interrupts_hc32l110.o(i.IRQ007_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[e]">IRQ008_Handler</a> from interrupts_hc32l110.o(i.IRQ008_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[f]">IRQ009_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[10]">IRQ010_Handler</a> from interrupts_hc32l110.o(i.IRQ010_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[11]">IRQ011_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[12]">IRQ012_Handler</a> from interrupts_hc32l110.o(i.IRQ012_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[13]">IRQ013_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[14]">IRQ014_Handler</a> from interrupts_hc32l110.o(i.IRQ014_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[15]">IRQ015_Handler</a> from interrupts_hc32l110.o(i.IRQ015_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[16]">IRQ016_Handler</a> from interrupts_hc32l110.o(i.IRQ016_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[17]">IRQ017_Handler</a> from interrupts_hc32l110.o(i.IRQ017_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[18]">IRQ018_Handler</a> from interrupts_hc32l110.o(i.IRQ018_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[19]">IRQ019_Handler</a> from interrupts_hc32l110.o(i.IRQ019_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[1a]">IRQ020_Handler</a> from interrupts_hc32l110.o(i.IRQ020_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[1b]">IRQ021_Handler</a> from interrupts_hc32l110.o(i.IRQ021_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[1c]">IRQ022_Handler</a> from interrupts_hc32l110.o(i.IRQ022_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[1d]">IRQ023_Handler</a> from interrupts_hc32l110.o(i.IRQ023_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[1e]">IRQ024_Handler</a> from interrupts_hc32l110.o(i.IRQ024_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[1f]">IRQ025_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[20]">IRQ026_Handler</a> from interrupts_hc32l110.o(i.IRQ026_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[21]">IRQ027_Handler</a> from interrupts_hc32l110.o(i.IRQ027_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[22]">IRQ028_Handler</a> from interrupts_hc32l110.o(i.IRQ028_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[23]">IRQ029_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[24]">IRQ030_Handler</a> from interrupts_hc32l110.o(i.IRQ030_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[25]">IRQ031_Handler</a> from interrupts_hc32l110.o(i.IRQ031_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[29]">LptInt</a> from lpt.o(i.LptInt) referenced from lpt.o(i.LPTIME_INIT)
 <LI><a href="#[1]">NMI_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[2a]">RxIntCallback</a> from lpuart.o(i.RxIntCallback) referenced from lpuart.o(i.LPUART_INIT)
 <LI><a href="#[3]">SVC_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_hc32l110.o(i.SystemInit) referenced from startup_hc32l110.o(.text)
 <LI><a href="#[2d]">WdtCallback</a> from wdt.o(i.WdtCallback) referenced from wdt.o(i.WDT_INIT)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hc32l110.o(.text)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[33]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[a6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[a7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[a8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[a9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>IRQ004_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ004_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ004_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRQ005_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ009_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ011_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ013_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ025_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ029_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_read
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaRxPacket
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdtCallback
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ReceiveData
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>Bt1Int</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, bt.o(i.Bt1Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Bt1Int
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_GetIntFlag
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt.o(i.TIME_INIT)
</UL>
<P><STRONG><a name="[35]"></a>Bt_ClearIntFlag</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, bt.o(i.Bt_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_INIT
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt1Int
</UL>

<P><STRONG><a name="[9b]"></a>Bt_EnableIrq</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, bt.o(i.Bt_EnableIrq))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_INIT
</UL>

<P><STRONG><a name="[34]"></a>Bt_GetIntFlag</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, bt.o(i.Bt_GetIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt1Int
</UL>

<P><STRONG><a name="[9a]"></a>Bt_Init</STRONG> (Thumb, 478 bytes, Stack size 12 bytes, bt.o(i.Bt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_INIT
</UL>

<P><STRONG><a name="[36]"></a>CLK_INIT</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, clk.o(i.CLK_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CLK_INIT &rArr; Clk_Init &rArr; Clk_SwitchTo &rArr; SystemCoreClockUpdate &rArr; Clk_GetHClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetRCHFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>Clk_Enable</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, clk.o(i.Clk_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clk_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkWriteDummy
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SwitchTo
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[47]"></a>Clk_GetClkRdy</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, clk.o(i.Clk_GetClkRdy))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SwitchTo
</UL>

<P><STRONG><a name="[98]"></a>Clk_GetHClkFreq</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, clk.o(i.Clk_GetHClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Clk_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[39]"></a>Clk_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, clk.o(i.Clk_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Clk_Init &rArr; Clk_SwitchTo &rArr; SystemCoreClockUpdate &rArr; Clk_GetHClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SwitchTo
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetPClkDiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetHClkDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_INIT
</UL>

<P><STRONG><a name="[40]"></a>Clk_SetFunc</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, clk.o(i.Clk_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Clk_SetFunc &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkWriteDummy
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>Clk_SetHClkDiv</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, clk.o(i.Clk_SetHClkDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clk_SetHClkDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log2
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Init
</UL>

<P><STRONG><a name="[3f]"></a>Clk_SetPClkDiv</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, clk.o(i.Clk_SetPClkDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clk_SetPClkDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log2
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Init
</UL>

<P><STRONG><a name="[6a]"></a>Clk_SetPeripheralGate</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, clk.o(i.Clk_SetPeripheralGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clk_SetPeripheralGate
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_INIT
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_INIT
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_INIT
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_INIT
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIME_INIT
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>Clk_SetRCHFreq</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, clk.o(i.Clk_SetRCHFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clk_SetRCHFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_INIT
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a1]"></a>Clk_SetRCLFreq</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, clk.o(i.Clk_SetRCLFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clk_SetRCLFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>Clk_SetRCL_StableTime</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, clk.o(i.Clk_SetRCL_StableTime))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SwitchTo
</UL>

<P><STRONG><a name="[43]"></a>Clk_SetSource</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, clk.o(i.Clk_SetSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clk_SetSource
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkWriteDummy
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SwitchTo
</UL>

<P><STRONG><a name="[44]"></a>Clk_SetXTH_StableTime</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, clk.o(i.Clk_SetXTH_StableTime))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SwitchTo
</UL>

<P><STRONG><a name="[46]"></a>Clk_SetXTL_StableTime</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, clk.o(i.Clk_SetXTL_StableTime))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SwitchTo
</UL>

<P><STRONG><a name="[3d]"></a>Clk_SwitchTo</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, clk.o(i.Clk_SwitchTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Clk_SwitchTo &rArr; SystemCoreClockUpdate &rArr; Clk_GetHClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetXTL_StableTime
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetXTH_StableTime
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetSource
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetRCL_StableTime
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_GetClkRdy
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Enable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Init
</UL>

<P><STRONG><a name="[49]"></a>Clk_SysTickConfig</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, clk.o(i.Clk_SysTickConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clk_SysTickConfig &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[64]"></a>EfRam_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, flash.o(i.EfRam_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EfRam_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ030_Handler
</UL>

<P><STRONG><a name="[4b]"></a>EnableNvic</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, interrupts_hc32l110.o(i.EnableNvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnableNvic &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_INIT
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIME_INIT
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRFio
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Init
</UL>

<P><STRONG><a name="[2b]"></a>ErrIntCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lpuart.o(i.ErrIntCallback))
<BR>[Address Reference Count : 1]<UL><LI> lpuart.o(i.LPUART_INIT)
</UL>
<P><STRONG><a name="[51]"></a>Gpio_ClearIrq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gpio.o(i.Gpio_ClearIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gpio_ClearIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRFio
</UL>

<P><STRONG><a name="[4d]"></a>Gpio_EnableIrq</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gpio.o(i.Gpio_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gpio_EnableIrq &rArr; _GpioEnableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GpioEnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRFio
</UL>

<P><STRONG><a name="[50]"></a>Gpio_GetIrqStat</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.Gpio_GetIrqStat))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>Gpio_IRQHandler</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, key.o(i.Gpio_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Gpio_IRQHandler &rArr; SX1278_LoRaRxPacket &rArr; SX1278_clearLoRaIrq &rArr; SX1278_SPIWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetIrqStat
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClearIrq
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_read
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaRxPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ003_Handler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ002_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ001_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ000_Handler
</UL>

<P><STRONG><a name="[54]"></a>Gpio_InitIO</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, gpio.o(i.Gpio_InitIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Gpio_InitIO &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAnalog
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_INIT
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_config
</UL>

<P><STRONG><a name="[56]"></a>Gpio_InitIOExt</STRONG> (Thumb, 350 bytes, Stack size 20 bytes, gpio.o(i.Gpio_InitIOExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAnalog
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_INIT
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRFio
</UL>

<P><STRONG><a name="[55]"></a>Gpio_SetAnalog</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gpio.o(i.Gpio_SetAnalog))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Gpio_SetAnalog
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIOExt
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIO
</UL>

<P><STRONG><a name="[67]"></a>Gpio_SetIO</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, gpio.o(i.Gpio_SetIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Gpio_SetIO
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaTxPacket
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_INIT
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRFio
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_Reset
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_HW_init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>IRQ000_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IRQ000_Handler &rArr; Gpio_IRQHandler &rArr; SX1278_LoRaRxPacket &rArr; SX1278_clearLoRaIrq &rArr; SX1278_SPIWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>IRQ001_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IRQ001_Handler &rArr; Gpio_IRQHandler &rArr; SX1278_LoRaRxPacket &rArr; SX1278_clearLoRaIrq &rArr; SX1278_SPIWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>IRQ002_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IRQ002_Handler &rArr; Gpio_IRQHandler &rArr; SX1278_LoRaRxPacket &rArr; SX1278_clearLoRaIrq &rArr; SX1278_SPIWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>IRQ003_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IRQ003_Handler &rArr; Gpio_IRQHandler &rArr; SX1278_LoRaRxPacket &rArr; SX1278_clearLoRaIrq &rArr; SX1278_SPIWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>IRQ006_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ007_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ008_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ008_Handler &rArr; LpUart_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>IRQ010_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ010_Handler &rArr; Spi_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ012_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ014_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ014_Handler &rArr; Tim_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ015_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ015_Handler &rArr; Tim_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ016_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ016_Handler &rArr; Tim_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ017_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ017_Handler &rArr; LpTim_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpTim_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ018_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ019_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ020_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ021_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pca_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ022_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ022_Handler &rArr; Wdt_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ023_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ024_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ026_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ027_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ028_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lvd_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ030_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ030_Handler &rArr; EfRam_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EfRam_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ031_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkTrim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>InitRFio</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, sx1278.o(i.InitRFio))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InitRFio &rArr; EnableNvic &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIOExt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_EnableIrq
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClearIrq
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>KEY_INIT</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, key.o(i.KEY_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KEY_INIT &rArr; Gpio_InitIO &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIO
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>LPTIME_INIT</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lpt.o(i.LPTIME_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPTIME_INIT &rArr; EnableNvic &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetPeripheralGate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpt_Run
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpt_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpt_EnableIrq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpt_ClearIntFlag
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpt_ARRSet
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>LPUART_INIT</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, lpuart.o(i.LPUART_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LPUART_INIT &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIOExt
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetPeripheralGate
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableIrq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>LPUart_ClrStatus</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, lpuart.o(i.LPUart_ClrStatus))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart_IRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ReceiveData
</UL>

<P><STRONG><a name="[73]"></a>LPUart_EnableFunc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpuart.o(i.LPUart_EnableFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUart_EnableFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_INIT
</UL>

<P><STRONG><a name="[71]"></a>LPUart_EnableIrq</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lpuart.o(i.LPUart_EnableIrq))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_INIT
</UL>

<P><STRONG><a name="[72]"></a>LPUart_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPUart_Init &rArr; LPUartInitNvic &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SetMultiMode
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SetMode
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SelSclkPrs
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SelSclk
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartInitNvic
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartGetInternDataCb
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartDeInitNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_INIT
</UL>

<P><STRONG><a name="[7d]"></a>LPUart_ReceiveData</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, lpuart.o(i.LPUart_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUart_ReceiveData &rArr; Lpt_ARRSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpt_Stop
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpt_Run
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpt_ARRSet
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxIntCallback
</UL>

<P><STRONG><a name="[79]"></a>LPUart_SelSclk</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, lpuart.o(i.LPUart_SelSclk))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[7a]"></a>LPUart_SelSclkPrs</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lpuart.o(i.LPUart_SelSclkPrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUart_SelSclkPrs
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[7b]"></a>LPUart_SetMode</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, lpuart.o(i.LPUart_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUart_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[7c]"></a>LPUart_SetMultiMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lpuart.o(i.LPUart_SetMultiMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUart_SetMultiMode
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[42]"></a>Log2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ddl.o(i.Log2))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetPClkDiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetHClkDiv
</UL>

<P><STRONG><a name="[5c]"></a>LpTim_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lpt.o(i.LpTim_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LpTim_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ017_Handler
</UL>

<P><STRONG><a name="[58]"></a>LpUart_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lpuart.o(i.LpUart_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LpUart_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartGetInternDataCb
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ008_Handler
</UL>

<P><STRONG><a name="[a3]"></a>Lpm_Config</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, lpm.o(i.Lpm_Config))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_config
</UL>

<P><STRONG><a name="[29]"></a>LptInt</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lpt.o(i.LptInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LptInt
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpt_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpt.o(i.LPTIME_INIT)
</UL>
<P><STRONG><a name="[6e]"></a>Lpt_ARRSet</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lpt.o(i.Lpt_ARRSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lpt_ARRSet
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIME_INIT
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ReceiveData
</UL>

<P><STRONG><a name="[6c]"></a>Lpt_ClearIntFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpt.o(i.Lpt_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIME_INIT
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LptInt
</UL>

<P><STRONG><a name="[6d]"></a>Lpt_EnableIrq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpt.o(i.Lpt_EnableIrq))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIME_INIT
</UL>

<P><STRONG><a name="[6b]"></a>Lpt_Init</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, lpt.o(i.Lpt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lpt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIME_INIT
</UL>

<P><STRONG><a name="[6f]"></a>Lpt_Run</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpt.o(i.Lpt_Run))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIME_INIT
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ReceiveData
</UL>

<P><STRONG><a name="[80]"></a>Lpt_Stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpt.o(i.Lpt_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ReceiveData
</UL>

<P><STRONG><a name="[81]"></a>ReadData</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, spi.o(i.ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIRead
</UL>

<P><STRONG><a name="[2a]"></a>RxIntCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lpuart.o(i.RxIntCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RxIntCallback &rArr; LPUart_ReceiveData &rArr; Lpt_ARRSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpuart.o(i.LPUART_INIT)
</UL>
<P><STRONG><a name="[83]"></a>SPI_INIT</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, spi.o(i.SPI_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_INIT &rArr; Spi_Init &rArr; EnableNvic &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetPeripheralGate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_SetCS
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>SX1278_HW_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sx1278.o(i.SX1278_HW_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SX1278_HW_init &rArr; delay1ms &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_SetCS
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_begin
</UL>

<P><STRONG><a name="[88]"></a>SX1278_LoRaEntryRx</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, sx1278.o(i.SX1278_LoRaEntryRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1278_LoRaEntryRx &rArr; SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_SPIBurstWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_Reset
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_defaultConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_clearLoRaIrq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIRead
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>SX1278_LoRaEntryTx</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, sx1278.o(i.SX1278_LoRaEntryTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1278_LoRaEntryTx &rArr; SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_SPIBurstWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_Reset
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_defaultConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_clearLoRaIrq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIRead
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>SX1278_LoRaRxPacket</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sx1278.o(i.SX1278_LoRaRxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX1278_LoRaRxPacket &rArr; SX1278_clearLoRaIrq &rArr; SX1278_SPIWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_clearLoRaIrq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIRead
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>SX1278_LoRaTxPacket</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sx1278.o(i.SX1278_LoRaTxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1278_LoRaTxPacket &rArr; SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_SPIBurstWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_Reset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_standby
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_defaultConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_clearLoRaIrq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIRead
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIBurstWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>SX1278_SPIBurstWrite</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, sx1278.o(i.SX1278_SPIBurstWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1278_SPIBurstWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_SetCS
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaTxPacket
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_config
</UL>

<P><STRONG><a name="[8c]"></a>SX1278_SPIRead</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, sx1278.o(i.SX1278_SPIRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1278_SPIRead &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_SetCS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaTxPacket
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryTx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryRx
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_config
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaRxPacket
</UL>

<P><STRONG><a name="[8a]"></a>SX1278_SPIWrite</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sx1278.o(i.SX1278_SPIWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1278_SPIWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_SetCS
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaTxPacket
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryTx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryRx
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_standby
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_sleep
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_entryLoRa
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_clearLoRaIrq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaRxPacket
</UL>

<P><STRONG><a name="[93]"></a>SX1278_begin</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, sx1278.o(i.SX1278_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1278_begin &rArr; SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_SPIBurstWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_HW_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_defaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>SX1278_clearLoRaIrq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sx1278.o(i.SX1278_clearLoRaIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1278_clearLoRaIrq &rArr; SX1278_SPIWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaTxPacket
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryTx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryRx
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaRxPacket
</UL>

<P><STRONG><a name="[94]"></a>SX1278_config</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, sx1278.o(i.SX1278_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1278_config &rArr; SX1278_SPIBurstWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_standby
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_sleep
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_entryLoRa
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIRead
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIBurstWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_defaultConfig
</UL>

<P><STRONG><a name="[89]"></a>SX1278_defaultConfig</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sx1278.o(i.SX1278_defaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_SPIBurstWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_config
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_begin
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaTxPacket
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryTx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryRx
</UL>

<P><STRONG><a name="[96]"></a>SX1278_entryLoRa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sx1278.o(i.SX1278_entryLoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1278_entryLoRa &rArr; SX1278_SPIWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_config
</UL>

<P><STRONG><a name="[8d]"></a>SX1278_hw_Reset</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sx1278.o(i.SX1278_hw_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SX1278_hw_Reset &rArr; delay1ms &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_SetCS
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaTxPacket
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryTx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryRx
</UL>

<P><STRONG><a name="[53]"></a>SX1278_read</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx1278.o(i.SX1278_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1278_read
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>SX1278_sleep</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sx1278.o(i.SX1278_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1278_sleep &rArr; SX1278_SPIWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_config
</UL>

<P><STRONG><a name="[91]"></a>SX1278_standby</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sx1278.o(i.SX1278_standby))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1278_standby &rArr; SX1278_SPIWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaTxPacket
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_config
</UL>

<P><STRONG><a name="[82]"></a>Spi_GetStatus</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, spi.o(i.Spi_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>

<P><STRONG><a name="[59]"></a>Spi_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi.o(i.Spi_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Spi_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ010_Handler
</UL>

<P><STRONG><a name="[85]"></a>Spi_Init</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, spi.o(i.Spi_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Spi_Init &rArr; EnableNvic &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_INIT
</UL>

<P><STRONG><a name="[84]"></a>Spi_SetCS</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(i.Spi_SetCS))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_INIT
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_Reset
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_HW_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIRead
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIBurstWrite
</UL>

<P><STRONG><a name="[48]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_hc32l110.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemCoreClockUpdate &rArr; Clk_GetHClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SwitchTo
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, system_hc32l110.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; Clk_GetHClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SysTickConfig
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetRCHFreq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Enable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>TIME_INIT</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, bt.o(i.TIME_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIME_INIT &rArr; EnableNvic &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetPeripheralGate
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_EnableIrq
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>Tim_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bt.o(i.Tim_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tim_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ016_Handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ015_Handler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ014_Handler
</UL>

<P><STRONG><a name="[9c]"></a>WDT_INIT</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wdt.o(i.WDT_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WDT_INIT &rArr; Wdt_Init &rArr; EnableNvic &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetPeripheralGate
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Start
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>WdtCallback</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, wdt.o(i.WdtCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WdtCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wdt.o(i.WDT_INIT)
</UL>
<P><STRONG><a name="[5f]"></a>Wdt_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wdt.o(i.Wdt_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Wdt_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ022_Handler
</UL>

<P><STRONG><a name="[9d]"></a>Wdt_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wdt.o(i.Wdt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Wdt_Init &rArr; EnableNvic &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_WriteWdtLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_INIT
</UL>

<P><STRONG><a name="[9e]"></a>Wdt_Start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wdt.o(i.Wdt_Start))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_IRQHandler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_INIT
</UL>

<P><STRONG><a name="[9f]"></a>Wdt_WriteWdtLoad</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wdt.o(i.Wdt_WriteWdtLoad))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Init
</UL>

<P><STRONG><a name="[92]"></a>WriteData</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, spi.o(i.WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIRead
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIBurstWrite
</UL>

<P><STRONG><a name="[4e]"></a>_GpioEnableIrq</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, gpio.o(i._GpioEnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GpioEnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_EnableIrq
</UL>

<P><STRONG><a name="[41]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, clk.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetFunc
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetRCHFreq
</UL>

<P><STRONG><a name="[b1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[b2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[b3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[37]"></a>ddl_memclr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ddl.o(i.ddl_memclr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ddl_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_INIT
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_INIT
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_INIT
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_config
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[87]"></a>delay1ms</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ddl.o(i.delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay1ms &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaTxPacket
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryRx
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_Reset
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_HW_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_config
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; SX1278_begin &rArr; SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_SPIBurstWrite &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_INIT
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_INIT
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_begin
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaTxPacket
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryTx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryRx
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_INIT
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_INIT
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIME_INIT
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_INIT
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRFio
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetRCLFreq
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetPeripheralGate
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetFunc
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_INIT
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_config
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Enable
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a2]"></a>sleep_config</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, main.o(i.sleep_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sleep_config &rArr; Gpio_InitIO &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpm_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIO
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3b]"></a>ClkUnlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(i.ClkUnlock))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetSource
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetPClkDiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetHClkDiv
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetFunc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Enable
</UL>

<P><STRONG><a name="[3c]"></a>ClkWriteDummy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(i.ClkWriteDummy))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetSource
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetFunc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Enable
</UL>

<P><STRONG><a name="[4a]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, clk.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SysTickConfig
</UL>

<P><STRONG><a name="[4c]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>

<P><STRONG><a name="[74]"></a>LPUartDeInitNvic</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpuart.o(i.LPUartDeInitNvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUartDeInitNvic &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[78]"></a>LPUartGetInternDataCb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lpuart.o(i.LPUartGetInternDataCb))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[77]"></a>LPUartInitNvic</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpuart.o(i.LPUartInitNvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUartInitNvic &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[75]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpuart.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartInitNvic
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartDeInitNvic
</UL>

<P><STRONG><a name="[76]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lpuart.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartInitNvic
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartDeInitNvic
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[61]"></a>Adc_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ024_Handler
</UL>

<P><STRONG><a name="[5d]"></a>Adt_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ020_Handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ019_Handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ018_Handler
</UL>

<P><STRONG><a name="[65]"></a>ClkTrim_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ031_Handler
</UL>

<P><STRONG><a name="[5a]"></a>I2c_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ012_Handler
</UL>

<P><STRONG><a name="[63]"></a>Lvd_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ028_Handler
</UL>

<P><STRONG><a name="[5e]"></a>Pca_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ021_Handler
</UL>

<P><STRONG><a name="[60]"></a>Rtc_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ023_Handler
</UL>

<P><STRONG><a name="[57]"></a>Uart_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ007_Handler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ006_Handler
</UL>

<P><STRONG><a name="[62]"></a>Vc_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ027_Handler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ026_Handler
</UL>
<HR></body></html>
